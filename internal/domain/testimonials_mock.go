// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that TestimonialUsecaseMock does implement TestimonialUsecase.
// If this is not the case, regenerate this file with moq.
var _ TestimonialUsecase = &TestimonialUsecaseMock{}

// TestimonialUsecaseMock is a mock implementation of TestimonialUsecase.
//
//	func TestSomethingThatUsesTestimonialUsecase(t *testing.T) {
//
//		// make and configure a mocked TestimonialUsecase
//		mockedTestimonialUsecase := &TestimonialUsecaseMock{
//			AddTranslationFunc: func(testimonialID uint, translation *TestimonialTranslation) (*Testimonial, error) {
//				panic("mock out the AddTranslation method")
//			},
//			CreateTestimonialFunc: func(testimonial *Testimonial) (*Testimonial, error) {
//				panic("mock out the CreateTestimonial method")
//			},
//			DeleteTestimonialFunc: func(id uint) error {
//				panic("mock out the DeleteTestimonial method")
//			},
//			GetAllTestimonialsFunc: func(filter *TestimonialFilter) (*MultipleTestimonialResponse, error) {
//				panic("mock out the GetAllTestimonials method")
//			},
//			GetTestimonialByIDFunc: func(id uint) (*Testimonial, error) {
//				panic("mock out the GetTestimonialByID method")
//			},
//			UpdateTestimonialFunc: func(testimonial *Testimonial) (*Testimonial, error) {
//				panic("mock out the UpdateTestimonial method")
//			},
//		}
//
//		// use mockedTestimonialUsecase in code that requires TestimonialUsecase
//		// and then make assertions.
//
//	}
type TestimonialUsecaseMock struct {
	// AddTranslationFunc mocks the AddTranslation method.
	AddTranslationFunc func(testimonialID uint, translation *TestimonialTranslation) (*Testimonial, error)

	// CreateTestimonialFunc mocks the CreateTestimonial method.
	CreateTestimonialFunc func(testimonial *Testimonial) (*Testimonial, error)

	// DeleteTestimonialFunc mocks the DeleteTestimonial method.
	DeleteTestimonialFunc func(id uint) error

	// GetAllTestimonialsFunc mocks the GetAllTestimonials method.
	GetAllTestimonialsFunc func(filter *TestimonialFilter) (*MultipleTestimonialResponse, error)

	// GetTestimonialByIDFunc mocks the GetTestimonialByID method.
	GetTestimonialByIDFunc func(id uint) (*Testimonial, error)

	// UpdateTestimonialFunc mocks the UpdateTestimonial method.
	UpdateTestimonialFunc func(testimonial *Testimonial) (*Testimonial, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddTranslation holds details about calls to the AddTranslation method.
		AddTranslation []struct {
			// TestimonialID is the testimonialID argument value.
			TestimonialID uint
			// Translation is the translation argument value.
			Translation *TestimonialTranslation
		}
		// CreateTestimonial holds details about calls to the CreateTestimonial method.
		CreateTestimonial []struct {
			// Testimonial is the testimonial argument value.
			Testimonial *Testimonial
		}
		// DeleteTestimonial holds details about calls to the DeleteTestimonial method.
		DeleteTestimonial []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetAllTestimonials holds details about calls to the GetAllTestimonials method.
		GetAllTestimonials []struct {
			// Filter is the filter argument value.
			Filter *TestimonialFilter
		}
		// GetTestimonialByID holds details about calls to the GetTestimonialByID method.
		GetTestimonialByID []struct {
			// ID is the id argument value.
			ID uint
		}
		// UpdateTestimonial holds details about calls to the UpdateTestimonial method.
		UpdateTestimonial []struct {
			// Testimonial is the testimonial argument value.
			Testimonial *Testimonial
		}
	}
	lockAddTranslation     sync.RWMutex
	lockCreateTestimonial  sync.RWMutex
	lockDeleteTestimonial  sync.RWMutex
	lockGetAllTestimonials sync.RWMutex
	lockGetTestimonialByID sync.RWMutex
	lockUpdateTestimonial  sync.RWMutex
}

// AddTranslation calls AddTranslationFunc.
func (mock *TestimonialUsecaseMock) AddTranslation(testimonialID uint, translation *TestimonialTranslation) (*Testimonial, error) {
	if mock.AddTranslationFunc == nil {
		panic("TestimonialUsecaseMock.AddTranslationFunc: method is nil but TestimonialUsecase.AddTranslation was just called")
	}
	callInfo := struct {
		TestimonialID uint
		Translation   *TestimonialTranslation
	}{
		TestimonialID: testimonialID,
		Translation:   translation,
	}
	mock.lockAddTranslation.Lock()
	mock.calls.AddTranslation = append(mock.calls.AddTranslation, callInfo)
	mock.lockAddTranslation.Unlock()
	return mock.AddTranslationFunc(testimonialID, translation)
}

// AddTranslationCalls gets all the calls that were made to AddTranslation.
// Check the length with:
//
//	len(mockedTestimonialUsecase.AddTranslationCalls())
func (mock *TestimonialUsecaseMock) AddTranslationCalls() []struct {
	TestimonialID uint
	Translation   *TestimonialTranslation
} {
	var calls []struct {
		TestimonialID uint
		Translation   *TestimonialTranslation
	}
	mock.lockAddTranslation.RLock()
	calls = mock.calls.AddTranslation
	mock.lockAddTranslation.RUnlock()
	return calls
}

// CreateTestimonial calls CreateTestimonialFunc.
func (mock *TestimonialUsecaseMock) CreateTestimonial(testimonial *Testimonial) (*Testimonial, error) {
	if mock.CreateTestimonialFunc == nil {
		panic("TestimonialUsecaseMock.CreateTestimonialFunc: method is nil but TestimonialUsecase.CreateTestimonial was just called")
	}
	callInfo := struct {
		Testimonial *Testimonial
	}{
		Testimonial: testimonial,
	}
	mock.lockCreateTestimonial.Lock()
	mock.calls.CreateTestimonial = append(mock.calls.CreateTestimonial, callInfo)
	mock.lockCreateTestimonial.Unlock()
	return mock.CreateTestimonialFunc(testimonial)
}

// CreateTestimonialCalls gets all the calls that were made to CreateTestimonial.
// Check the length with:
//
//	len(mockedTestimonialUsecase.CreateTestimonialCalls())
func (mock *TestimonialUsecaseMock) CreateTestimonialCalls() []struct {
	Testimonial *Testimonial
} {
	var calls []struct {
		Testimonial *Testimonial
	}
	mock.lockCreateTestimonial.RLock()
	calls = mock.calls.CreateTestimonial
	mock.lockCreateTestimonial.RUnlock()
	return calls
}

// DeleteTestimonial calls DeleteTestimonialFunc.
func (mock *TestimonialUsecaseMock) DeleteTestimonial(id uint) error {
	if mock.DeleteTestimonialFunc == nil {
		panic("TestimonialUsecaseMock.DeleteTestimonialFunc: method is nil but TestimonialUsecase.DeleteTestimonial was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	mock.lockDeleteTestimonial.Lock()
	mock.calls.DeleteTestimonial = append(mock.calls.DeleteTestimonial, callInfo)
	mock.lockDeleteTestimonial.Unlock()
	return mock.DeleteTestimonialFunc(id)
}

// DeleteTestimonialCalls gets all the calls that were made to DeleteTestimonial.
// Check the length with:
//
//	len(mockedTestimonialUsecase.DeleteTestimonialCalls())
func (mock *TestimonialUsecaseMock) DeleteTestimonialCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	mock.lockDeleteTestimonial.RLock()
	calls = mock.calls.DeleteTestimonial
	mock.lockDeleteTestimonial.RUnlock()
	return calls
}

// GetAllTestimonials calls GetAllTestimonialsFunc.
func (mock *TestimonialUsecaseMock) GetAllTestimonials(filter *TestimonialFilter) (*MultipleTestimonialResponse, error) {
	if mock.GetAllTestimonialsFunc == nil {
		panic("TestimonialUsecaseMock.GetAllTestimonialsFunc: method is nil but TestimonialUsecase.GetAllTestimonials was just called")
	}
	callInfo := struct {
		Filter *TestimonialFilter
	}{
		Filter: filter,
	}
	mock.lockGetAllTestimonials.Lock()
	mock.calls.GetAllTestimonials = append(mock.calls.GetAllTestimonials, callInfo)
	mock.lockGetAllTestimonials.Unlock()
	return mock.GetAllTestimonialsFunc(filter)
}

// GetAllTestimonialsCalls gets all the calls that were made to GetAllTestimonials.
// Check the length with:
//
//	len(mockedTestimonialUsecase.GetAllTestimonialsCalls())
func (mock *TestimonialUsecaseMock) GetAllTestimonialsCalls() []struct {
	Filter *TestimonialFilter
} {
	var calls []struct {
		Filter *TestimonialFilter
	}
	mock.lockGetAllTestimonials.RLock()
	calls = mock.calls.GetAllTestimonials
	mock.lockGetAllTestimonials.RUnlock()
	return calls
}

// GetTestimonialByID calls GetTestimonialByIDFunc.
func (mock *TestimonialUsecaseMock) GetTestimonialByID(id uint) (*Testimonial, error) {
	if mock.GetTestimonialByIDFunc == nil {
		panic("TestimonialUsecaseMock.GetTestimonialByIDFunc: method is nil but TestimonialUsecase.GetTestimonialByID was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	mock.lockGetTestimonialByID.Lock()
	mock.calls.GetTestimonialByID = append(mock.calls.GetTestimonialByID, callInfo)
	mock.lockGetTestimonialByID.Unlock()
	return mock.GetTestimonialByIDFunc(id)
}

// GetTestimonialByIDCalls gets all the calls that were made to GetTestimonialByID.
// Check the length with:
//
//	len(mockedTestimonialUsecase.GetTestimonialByIDCalls())
func (mock *TestimonialUsecaseMock) GetTestimonialByIDCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	mock.lockGetTestimonialByID.RLock()
	calls = mock.calls.GetTestimonialByID
	mock.lockGetTestimonialByID.RUnlock()
	return calls
}

// UpdateTestimonial calls UpdateTestimonialFunc.
func (mock *TestimonialUsecaseMock) UpdateTestimonial(testimonial *Testimonial) (*Testimonial, error) {
	if mock.UpdateTestimonialFunc == nil {
		panic("TestimonialUsecaseMock.UpdateTestimonialFunc: method is nil but TestimonialUsecase.UpdateTestimonial was just called")
	}
	callInfo := struct {
		Testimonial *Testimonial
	}{
		Testimonial: testimonial,
	}
	mock.lockUpdateTestimonial.Lock()
	mock.calls.UpdateTestimonial = append(mock.calls.UpdateTestimonial, callInfo)
	mock.lockUpdateTestimonial.Unlock()
	return mock.UpdateTestimonialFunc(testimonial)
}

// UpdateTestimonialCalls gets all the calls that were made to UpdateTestimonial.
// Check the length with:
//
//	len(mockedTestimonialUsecase.UpdateTestimonialCalls())
func (mock *TestimonialUsecaseMock) UpdateTestimonialCalls() []struct {
	Testimonial *Testimonial
} {
	var calls []struct {
		Testimonial *Testimonial
	}
	mock.lockUpdateTestimonial.RLock()
	calls = mock.calls.UpdateTestimonial
	mock.lockUpdateTestimonial.RUnlock()
	return calls
}

// Ensure, that TestimonialRepositoryMock does implement TestimonialRepository.
// If this is not the case, regenerate this file with moq.
var _ TestimonialRepository = &TestimonialRepositoryMock{}

// TestimonialRepositoryMock is a mock implementation of TestimonialRepository.
//
//	func TestSomethingThatUsesTestimonialRepository(t *testing.T) {
//
//		// make and configure a mocked TestimonialRepository
//		mockedTestimonialRepository := &TestimonialRepositoryMock{
//			CreateFunc: func(testimonial *Testimonial) (*Testimonial, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(id uint) error {
//				panic("mock out the Delete method")
//			},
//			GetAllFunc: func(filter *TestimonialFilter) (*MultipleTestimonialResponse, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByIDFunc: func(id uint, languageCodes []string) (*Testimonial, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateFunc: func(testimonial *Testimonial) (*Testimonial, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedTestimonialRepository in code that requires TestimonialRepository
//		// and then make assertions.
//
//	}
type TestimonialRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(testimonial *Testimonial) (*Testimonial, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id uint) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(filter *TestimonialFilter) (*MultipleTestimonialResponse, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id uint, languageCodes []string) (*Testimonial, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(testimonial *Testimonial) (*Testimonial, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Testimonial is the testimonial argument value.
			Testimonial *Testimonial
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Filter is the filter argument value.
			Filter *TestimonialFilter
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID uint
			// LanguageCodes is the languageCodes argument value.
			LanguageCodes []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Testimonial is the testimonial argument value.
			Testimonial *Testimonial
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockGetAll  sync.RWMutex
	lockGetByID sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *TestimonialRepositoryMock) Create(testimonial *Testimonial) (*Testimonial, error) {
	if mock.CreateFunc == nil {
		panic("TestimonialRepositoryMock.CreateFunc: method is nil but TestimonialRepository.Create was just called")
	}
	callInfo := struct {
		Testimonial *Testimonial
	}{
		Testimonial: testimonial,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(testimonial)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTestimonialRepository.CreateCalls())
func (mock *TestimonialRepositoryMock) CreateCalls() []struct {
	Testimonial *Testimonial
} {
	var calls []struct {
		Testimonial *Testimonial
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TestimonialRepositoryMock) Delete(id uint) error {
	if mock.DeleteFunc == nil {
		panic("TestimonialRepositoryMock.DeleteFunc: method is nil but TestimonialRepository.Delete was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedTestimonialRepository.DeleteCalls())
func (mock *TestimonialRepositoryMock) DeleteCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *TestimonialRepositoryMock) GetAll(filter *TestimonialFilter) (*MultipleTestimonialResponse, error) {
	if mock.GetAllFunc == nil {
		panic("TestimonialRepositoryMock.GetAllFunc: method is nil but TestimonialRepository.GetAll was just called")
	}
	callInfo := struct {
		Filter *TestimonialFilter
	}{
		Filter: filter,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(filter)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedTestimonialRepository.GetAllCalls())
func (mock *TestimonialRepositoryMock) GetAllCalls() []struct {
	Filter *TestimonialFilter
} {
	var calls []struct {
		Filter *TestimonialFilter
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *TestimonialRepositoryMock) GetByID(id uint, languageCodes []string) (*Testimonial, error) {
	if mock.GetByIDFunc == nil {
		panic("TestimonialRepositoryMock.GetByIDFunc: method is nil but TestimonialRepository.GetByID was just called")
	}
	callInfo := struct {
		ID            uint
		LanguageCodes []string
	}{
		ID:            id,
		LanguageCodes: languageCodes,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id, languageCodes)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedTestimonialRepository.GetByIDCalls())
func (mock *TestimonialRepositoryMock) GetByIDCalls() []struct {
	ID            uint
	LanguageCodes []string
} {
	var calls []struct {
		ID            uint
		LanguageCodes []string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TestimonialRepositoryMock) Update(testimonial *Testimonial) (*Testimonial, error) {
	if mock.UpdateFunc == nil {
		panic("TestimonialRepositoryMock.UpdateFunc: method is nil but TestimonialRepository.Update was just called")
	}
	callInfo := struct {
		Testimonial *Testimonial
	}{
		Testimonial: testimonial,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(testimonial)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedTestimonialRepository.UpdateCalls())
func (mock *TestimonialRepositoryMock) UpdateCalls() []struct {
	Testimonial *Testimonial
} {
	var calls []struct {
		Testimonial *Testimonial
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
