// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that OtherServiceRepositoryMock does implement OtherServiceRepository.
// If this is not the case, regenerate this file with moq.
var _ OtherServiceRepository = &OtherServiceRepositoryMock{}

// OtherServiceRepositoryMock is a mock implementation of OtherServiceRepository.
//
//	func TestSomethingThatUsesOtherServiceRepository(t *testing.T) {
//
//		// make and configure a mocked OtherServiceRepository
//		mockedOtherServiceRepository := &OtherServiceRepositoryMock{
//			CreateFunc: func(service *OtherService) (*OtherService, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(id uint) error {
//				panic("mock out the Delete method")
//			},
//			GetAllFunc: func(filter *ServiceFilter) (*MultipleOtherServices, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByIDFunc: func(id uint, languageCodes []string) (*OtherService, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateFunc: func(service *OtherService) (*OtherService, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedOtherServiceRepository in code that requires OtherServiceRepository
//		// and then make assertions.
//
//	}
type OtherServiceRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(service *OtherService) (*OtherService, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id uint) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(filter *ServiceFilter) (*MultipleOtherServices, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id uint, languageCodes []string) (*OtherService, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(service *OtherService) (*OtherService, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Service is the service argument value.
			Service *OtherService
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Filter is the filter argument value.
			Filter *ServiceFilter
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID uint
			// LanguageCodes is the languageCodes argument value.
			LanguageCodes []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Service is the service argument value.
			Service *OtherService
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockGetAll  sync.RWMutex
	lockGetByID sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *OtherServiceRepositoryMock) Create(service *OtherService) (*OtherService, error) {
	if mock.CreateFunc == nil {
		panic("OtherServiceRepositoryMock.CreateFunc: method is nil but OtherServiceRepository.Create was just called")
	}
	callInfo := struct {
		Service *OtherService
	}{
		Service: service,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(service)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedOtherServiceRepository.CreateCalls())
func (mock *OtherServiceRepositoryMock) CreateCalls() []struct {
	Service *OtherService
} {
	var calls []struct {
		Service *OtherService
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *OtherServiceRepositoryMock) Delete(id uint) error {
	if mock.DeleteFunc == nil {
		panic("OtherServiceRepositoryMock.DeleteFunc: method is nil but OtherServiceRepository.Delete was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedOtherServiceRepository.DeleteCalls())
func (mock *OtherServiceRepositoryMock) DeleteCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *OtherServiceRepositoryMock) GetAll(filter *ServiceFilter) (*MultipleOtherServices, error) {
	if mock.GetAllFunc == nil {
		panic("OtherServiceRepositoryMock.GetAllFunc: method is nil but OtherServiceRepository.GetAll was just called")
	}
	callInfo := struct {
		Filter *ServiceFilter
	}{
		Filter: filter,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(filter)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedOtherServiceRepository.GetAllCalls())
func (mock *OtherServiceRepositoryMock) GetAllCalls() []struct {
	Filter *ServiceFilter
} {
	var calls []struct {
		Filter *ServiceFilter
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *OtherServiceRepositoryMock) GetByID(id uint, languageCodes []string) (*OtherService, error) {
	if mock.GetByIDFunc == nil {
		panic("OtherServiceRepositoryMock.GetByIDFunc: method is nil but OtherServiceRepository.GetByID was just called")
	}
	callInfo := struct {
		ID            uint
		LanguageCodes []string
	}{
		ID:            id,
		LanguageCodes: languageCodes,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id, languageCodes)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedOtherServiceRepository.GetByIDCalls())
func (mock *OtherServiceRepositoryMock) GetByIDCalls() []struct {
	ID            uint
	LanguageCodes []string
} {
	var calls []struct {
		ID            uint
		LanguageCodes []string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *OtherServiceRepositoryMock) Update(service *OtherService) (*OtherService, error) {
	if mock.UpdateFunc == nil {
		panic("OtherServiceRepositoryMock.UpdateFunc: method is nil but OtherServiceRepository.Update was just called")
	}
	callInfo := struct {
		Service *OtherService
	}{
		Service: service,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(service)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedOtherServiceRepository.UpdateCalls())
func (mock *OtherServiceRepositoryMock) UpdateCalls() []struct {
	Service *OtherService
} {
	var calls []struct {
		Service *OtherService
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
